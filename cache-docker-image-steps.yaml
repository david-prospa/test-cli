parameters:
  - name: repository
    type: string
  - name: tag
    type: string

steps:
  - task: Cache@2
    inputs:
      key: 'docker | "$(Agent.OS)" | "${{ parameters.repository }}" | "${{ parameters.tag }}"'
      path: $(Pipeline.Workspace)/docker
      cacheHitVar: DOCKER_CACHE_RESTORED
    displayName: Caching ${{ parameters.repository }}:${{ parameters.tag }} repository

  - bash: |
      docker load < $(Pipeline.Workspace)/docker/${{ parameters.repository }}/${{ parameters.tag }}.tar
    displayName: Load image ${{ parameters.repository }}:${{ parameters.tag }} from tar
    condition: and(not(canceled()), eq(variables.DOCKER_CACHE_RESTORED, 'true'))

  - bash: |
      mkdir -p $(Pipeline.Workspace)/docker/${{ parameters.repository }}
      docker pull ${{ parameters.repository }}:${{ parameters.tag }}
      docker save ${{ parameters.repository }}:${{ parameters.tag }} > $(Pipeline.Workspace)/docker/${{ parameters.repository }}/${{ parameters.tag }}.tar
    displayName: Pull and save image ${{ parameters.repository }}:${{ parameters.tag }} to tar
    condition: and(not(canceled()), or(failed(), ne(variables.DOCKER_CACHE_RESTORED, 'true')))
